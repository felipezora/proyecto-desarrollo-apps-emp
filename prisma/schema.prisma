generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     User[]        @relation("roles")
}

model User {
  id               String      @id @default(cuid())
  email            String      @unique
  image            String?
  name             String?
  emailVerified    DateTime?
  departmentId     String?
  roleId           String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  accounts         Account[]
  departmentLeader Department? @relation("deparLeader")
  profile          Profile?
  projectLeader    Project[]   @relation("project-leader")
  sessions         Session[]
  department       Department? @relation("employees", fields: [departmentId], references: [id])
  role             Role?       @relation("roles", fields: [roleId], references: [id])
  projectMember    Project[]   @relation("project-member")
}

model Profile {
  id          String   @id @default(cuid())
  phone       String?
  address     String?
  customImage String?
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String     @id @default(cuid())
  name         String
  start_date   DateTime
  end_date     DateTime
  id_leader    String?
  departmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  files        File[]     @relation("project-files")
  department   Department @relation("project-department", fields: [departmentId], references: [id])
  leader       User?      @relation("project-leader", fields: [id_leader], references: [id])
  employees    User[]     @relation("project-member")
}

model Log {
  id          String   @id @default(cuid())
  description String
  createdAt   DateTime @default(now())
}

model Department {
  id                 String    @id @default(cuid())
  name               String
  departmentLeaderId String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  leader             User      @relation("deparLeader", fields: [departmentLeaderId], references: [id])
  projects           Project[] @relation("project-department")
  employees          User[]    @relation("employees")
}

model File {
  id        String   @id @default(cuid())
  format    String
  name      String
  url       String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation("project-files", fields: [projectId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Enum_RoleName {
  EMPLOYEE
  LEADER
  ADMINISTRATOR
  SUPERUSER
}
