generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_RoleName {
  EMPLOYEE
  LEADER
  ADMINISTRATOR
  SUPERUSER
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  users     User[]        @relation(name: "roles")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  image            String?
  name             String?
  emailVerified    DateTime?
  department       Department?  @relation(fields: [departmentId], references: [id], name: "employees")
  departmentId     String?
  role             Role?        @relation(fields: [roleId], references: [id], name: "roles")
  roleId           String?
  departmentLeader Department[] @relation(name: "deparLeader")
  projectLeader    Project[]    @relation(name: "project-leader")
  projectMember    Project[]    @relation(name: "project-member")
  accounts         Account[]
  sessions         Session[]
  profile          Profile?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  phone       String?
  address     String?
  customImage String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id           String     @id @default(cuid())
  name         String
  start_date   DateTime
  end_date     DateTime
  leader       User?      @relation(fields: [id_leader], references: [id], name: "project-leader")
  id_leader    String?
  department   Department @relation(fields: [departmentId], references: [id], name: "project-department")
  departmentId String
  employees    User[]     @relation(name: "project-member")
  files        File[]     @relation(name: "project-files")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Log {
  id          String   @id @default(cuid())
  description String
  createdAt   DateTime @default(now())
}

model Department {
  id                 String    @id @default(cuid())
  name               String
  departmentLeaderId String    @unique
  leader             User      @relation(name: "deparLeader", references: [id], fields: [departmentLeaderId])
  employees          User[]    @relation(name: "employees")
  projects           Project[] @relation(name: "project-department")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model File {
  id        String   @id @default(cuid())
  format    String
  name      String
  url       String
  project   Project  @relation(fields: [projectId], references: [id], name: "project-files")
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
